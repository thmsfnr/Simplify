@startuml


' Presentation Layer

class Application {
  + start(Stage stage) : void
  + launch(String[] tab) : void
}

class PlacementFrame extends Application {
  + start(Stage stage) : void
}

class PlacementController {
  - initialize(URL url, ResourceBundle resourceBundle) : void
  - addTables(PlacementFacade placementFacade, int idRestaurant) : void
  - synchronized deletePlacement(ActionEvent event) : void
  - synchronized updatePlacement(ActionEvent event) : void
  - switchToManagementTablePage(ActionEvent event) : void
}


' Business Layer

class PlacementFacade{
  - RestaurantDAO restaurantDAO
  - TableDAO tableDAO
  + deletePlacement(int idTable) : void
  + updatePlacement(int idTable, int x, int y) : void
  + getRestaurantById(int id) : Restaurant
  + getAllTablesOfRestaurant(int idRestaurant) : List<Table>
  + getTableById(int idTable) : Table
  + getInstance() : PlacementFacade
}

class LabelHashable extends Label {
    + equals(Object o) : boolean
    + hashCode() : int
}

class Position {
  - x : int
  - y : int
  + equals(Object o) : boolean
  + hashCode() : int
}
' Persistence Layer


abstract class AbstractDAOFactory{
  + abstract getTableDAO() : TableDAO
  + abstract getRestaurantDAO() : RestaurantDAO
  + getInstance() : AbstractDAOFactory
}

class PostGresDAOFactory extends AbstractDAOFactory{
  -ConnectionPostgres : ConnectionPostgres
  + getTableDAO() : TableDAO
  + getRestaurantDAO() : RestaurantDAO
}


abstract class TableDAO{
  + deletePlacement(int idTable) : void
  + updatePlacement(int idTable, int x, int y) : void
  + getAllTableOfRestaurant(int idRestaurant) : List<Table>
  + getTableById(int idTable) : Table
}

abstract class RestaurantDAO{
  + getRestaurantById(int id) : Restaurant
}

class ConnectionPostgres{
  - url : String
  - user : String
  - password : String
  + getConnection() : Connection
}

class LocalStorage{
 + write(String key,Object value) : void
 + load(String key) : Object
}



PlacementController -> PlacementFacade
PlacementController --> LocalStorage
PlacementController --> Position
PlacementController --> LabelHashable

PlacementFrame -- PlacementController

PlacementFacade -> AbstractDAOFactory
PlacementFacade -> TableDAO
PlacementFacade -> RestaurantDAO

PostGresDAOFactory --> ConnectionPostgres

AbstractDAOFactory -> TableDAO
AbstractDAOFactory -> RestaurantDAO

@enduml

